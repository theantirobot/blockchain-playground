  type Query {
    subscriptions(first: Int, after: String, filter: SubscriptionFilter): SubscriptionConnection
    subscription(id: ID!): Subscription
  }

  type Mutation {
    subscribe(input: SubscribeInput!): Subscription
    updateSubscription(id: ID!, input: SubscribeInput!): Subscription
    unsubscribe(id: ID!): Boolean
  }

  input SubscribeInput {
    address: String!
    webhookUrl: String!
    confirmationCount: Int!
  }

  type Subscription @key(fields: "id") {
    id: ID!
    webhookUrl: String
    address: String
    confirmationCount: Int
    revisions(first: Int, after: String): SubscriptionRevisionConnection
  }

  type SubscriptionConnection {
    edges: [SubscriptionEdge]
    pageInfo: PageInfo
  }

  type SubscriptionEdge {
    node: Subscription
    cursor: String!
  }

  type PageInfo {
    endCursor: String
    hasNextPage: Boolean!
  }

  type Block {
    id: ID!
  }

  input SubscriptionFilter {
    addresses: [String]
 }

  type SubscriptionRevisionConnection {
    edges: [SubscriptionRevisionEdge]
    pageInfo: PageInfo
  }

  type SubscriptionRevisionEdge {
    node: SubscriptionRevision
    cursor: String!
  }

  type SubscriptionRevision {
    id: ID!
    changeSummary: String!
    subscription: Subscription!
  }